import { Channel, InteractionReplyOptions, MessageEmbedOptions, Util } from "discord.js";
import { VerifiedCommandInteraction, Result, ApplicationCommandDefinition } from "../types";

// Dependencies
let moment = require("moment");

// Truly random seed, generated by putting trainee in front of vim and tell him to exit
const randomSeed = "AQa0B7HK4vvrBOlaKKplMsKorGhN4gJvOCBWxw531P8uwpeIU3d39ODZ02fbvcxiImOwAOuOtR4eaiPDkyTCbSqzKnaJWqp4AqwxOTMgU2UCPWKIH4WXCQzVq8M7oqWBF32KEAdAoXvAm5o3Wvl4MOwdMJk1LleFjv7mQJizltVw3Y2Tan88uc3JxoJurDTKvxBzRt6H";

// Just for reference, this is how it's supposed to be done:
// const randomSeed = String(require("crypto").randomBytes(200));
// gg @tobi6112

/**
 * Index of Coincedence
 *
 * @param {string} s
 * @returns {number} index
 */
const iocCalculator = function(s: string){
    let bigrams = new Map();
    let text = s.replace(/\s+/g, "");
    [...text].forEach(c => (bigrams.has(c) ? bigrams.set(c, bigrams.get(c) + 1) : bigrams.set(c, 1)));

    let sum = 0;
    bigrams.forEach(v => (sum += v + (v - 1)));
    return sum / (text.length * (text.length - 1));
};

/**
 * Highly complex and very very secure
 *
 * @param {number} min
 * @param {number} max
 * @param {number} seed
 * @returns {number} random floored number >= min and <= max
 */
const rng = function(min: number, max: number, seed: number){
    let sido = (seed * 9301 + 49297) % 233280;
    let rnd = sido / 233280;
    let disp = Math.abs(Math.sin(sido));

    rnd = rnd + disp - Math.floor(rnd + disp);

    return Math.floor((min || 0) + rnd * ((max || 1) - (min || 0) + 1));
};

const ioc = iocCalculator(randomSeed);

/**
 * Highly complex, secure and optimized decision maker algorithm
 *
 * @param {string} question
 * @param {number} max
 * @returns {number} decision
 */
const secureDecisionMaker = (question: string, max = 1) => (rng(0, max, (Date.now() * ioc) / iocCalculator(question)));

async function handler(interaction: VerifiedCommandInteraction): Promise<Result> {
    const {options, member} = interaction;
    const {user} = member;

    const embed: MessageEmbedOptions = {
        timestamp: moment.utc().format(),
        author: {
            name: `Secure Decision fÃ¼r ${user.username}`,
            icon_url: user.displayAvatarURL()
        }
    };

    const reply: InteractionReplyOptions = {
        embeds: [ embed ]
    };

    let question = "";
    const subcommand = options.getSubCommand();

    if (subcommand === "frage") {
        question = "MAKEITCOMPILE";//options.getSubCommand("frage")?.options?.get("question")?.value as string;
        const decision = secureDecisionMaker(question);
        let file;
        if (!!decision) {
            embed.color = 0x2ecc71;
            file = "yes.png";
        }
        else {
            embed.color = 0xe74c3c;
            file = "no.png";
        }
        embed.thumbnail = {
            url: `attachment://${file}`
        };
        reply.files = [`./assets/${file}`];
    }
    else if (subcommand === "auswahl") {
        const answers = options.get("auswahl")?.options?.map(a => a.value as string).filter(a => !!a);

        if (!answers) {
            throw new Error("answers is unexpectedly undefined");
        }

        question = answers.reduce((p, c, i, a) => (`${p}${i === a.length - 1 ? " oder " : ", "}${c}`));

        const decision = secureDecisionMaker(question, answers.length - 1);
        embed.color = 0x9b59b6;
        embed.description = `Mashallah, ich rate dir zu **${answers[decision]}**!`;
    }

    if (!question.endsWith("?")) question += "?";

    embed.title = Util.cleanContent(question, interaction.channel as Channel);

    return reply;
};

export const applicationCommands: ApplicationCommandDefinition[] = [
    {
        handler,
        data: {
            name: "sdm",
            description: "Macht eine Secure Decision mithilfe eines komplexen, hochoptimierten, Blockchain Algorithmus.",
            options: [
                {
                    name: "frage",
                    type: "SUB_COMMAND",
                    description: "Erstellt eine Secure Decision aufgrund einer Fragestellung",
                    options: [
                        {
                            name: "question",
                            type: "STRING",
                            description: "Fragestellung",
                            required: true
                        }
                    ]
                },
                {
                    name: "auswahl",
                    type: "SUB_COMMAND",
                    description: "Erstellt eine Secure Decision anhand einer Auswahl",
                    options: [
                        {
                            name: "s1",
                            type: "STRING",
                            description: "Auswahlelement 1",
                            required: true
                        },
                        {
                            name: "s2",
                            type: "STRING",
                            description: "Auswahlelement 2",
                            required: true
                        },
                        {
                            name: "s3",
                            type: "STRING",
                            description: "Auswahlelement 3"
                        },
                        {
                            name: "s4",
                            type: "STRING",
                            description: "Auswahlelement 4"
                        },
                        {
                            name: "s5",
                            type: "STRING",
                            description: "Auswahlelement 35"
                        },
                        {
                            name: "s6",
                            type: "STRING",
                            description: "Auswahlelement 6"
                        },
                        {
                            name: "s7",
                            type: "STRING",
                            description: "Auswahlelement 7"
                        },
                        {
                            name: "s8",
                            type: "STRING",
                            description: "Auswahlelement 8"
                        },
                        {
                            name: "s9",
                            type: "STRING",
                            description: "Auswahlelement 9"
                        }
                    ]
                }
            ]
        }
    }
];
